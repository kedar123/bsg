<SCRIPT TYPE="text/javascript">
<!--

// Create the slideshow object
ss = new slideshow("ss");

// Set the delay between slides, 1000 = 1 sec
// ss.timeout = 3000;

// By default, all of the slideshow images are prefetched.
// If you have a large number of slides you can limit the
// number of images that are prefetched.
// ss.prefetch = 1;

// By default the slideshow will repeat when you get to the end.
// ss.repeat = false;

// Create the slides and add them to the slideshow.
s = new slide();
s.src =  "/images/button.png";
s.link = "/images/button.png";
s.title = "First slide";
s.text = "This is the text for slide number <em>one<\/em>.";
//s.target = "";
//s.attr = "";
//s.filter = "";
//s.timeout = "";
ss.add_slide(s);

s = new slide();
s.src =  "/images/calendar.gif";
s.link = "/images/calendar.gif";
s.title = "Second slide";
s.text = "This is the text for slide number <em>two<\/em>.";
ss.add_slide(s);

s = new slide();
s.src =  "/images/flag-1.png";
s.link = "/images/flag-1.png";
s.title = "Third slide";
s.text = "This is the text for slide number <em>three<\/em>.";
ss.add_slide(s);

// The following loop sets an attribute for all of the slides.
// This is easier than setting the attributes individually.

for (var i=0; i < ss.slides.length; i++) {

  s = ss.slides[i];
  s.target = "ss_popup";
  s.attr = "width=320,height=420,resizable=yes,scrollbars=yes";

}

//-->
</SCRIPT>
<script language="javascript"> 
function ntoggle() {
	var ele = document.getElementById("noticeToggle");
	var text = document.getElementById("displayText");
	if(ele.style.display == "block") {
    		ele.style.display = "none";
  	}
	else {
		ele.style.display = "block";
	}
} 
</script>

<div id="tabass">
    <ul>
      <!--  <li><a href="#fragment-1"><span>Artworks</span></a></li>  -->
        <li><a href="#fragment-2"><span>Exhibitions</span></a></li>
        <li><a href="#fragment-3"><span>Competitions</span></a></li>
        <li><a href="#fragment-4"><span>Invoices</span></a></li>
        <li><a href="#fragment-5"><span>Mail</span></a></li>
				<li><a href="#fragment-6"><span>Biography</span></a></li>
				<li><a href="#fragment-7"><span>Notice</span></a></li>
    </ul>
  <div style="font-size:10px;">
 

<!--   <div id="fragment-1">
      <% profile_workspace = @current_object.profile_workspace || @current_object.user.private_workspace %>
          </div> 

-->

    <div id="fragment-2">
      <div style="float:right;">
      <%if current_user.login=="admin" || current_user.login=="superadmin"%>
          <%= link_to "add an exhibition", new_admin_workspace_exhibition_path(profile_workspace.id) %><br/>
          <%= link_to "add to group show", "/add_user_to_groupshow/#{@current_object.user.id}" %>
      <%end%>
    </div><br/>
      
      <% if !(exhibitions_users=@current_object.user.exhibitions_users.all(:include => [:exhibition], :order => 'created_at DESC')).empty? %>
        <% exhibitions_users.each do |eu| %>
          
          <%# blank_list_element(:date => eu.created_at, :title => link_to(eu.exhibition.title, admin_exhibition_path(eu.exhibition_id))+" with state '#{eu.state}'") do %>
            <%#= link_to_remote('Pay online', :url => new_admin_payment_url(:iid => @current_object.id), :update => 'modal_space', :method => :get) if i.state != 'validated' %>
          <%# end %>
          <% blank_list_element(:date => eu.exhibition.timing.starting_date, :title => link_to(eu.exhibition.title, admin_exhibition_path(eu.exhibition_id))) do %>
   
        <% if    !eu.user.invoices.blank?  and(  (eu.user.invoices.find(:first ,:conditions=>["purchasable_id = ? ",eu.id]) != nil and   eu.user.invoices.find(:first ,:conditions=>["purchasable_id = ? ",eu.id]).state != "validated") or (eu.user.invoices.find(:last ,:conditions=>["purchasable_id = ? ",eu.id]) != nil and   eu.user.invoices.find(:last ,:conditions=>["purchasable_id = ? ",eu.id]).state != "validated")) %>
            <%#= link_to_remote('Pay online', :url => new_admin_payment_url(:iid => @current_object.id), :update => 'modal_space', :method => :get)  %>
            <%=link_to_remote "Pay Online", :url=>"/admin/profiles/exhibition_payment/#{eu.id}",:update => 'modal_space', :method => :get%>
          <%end%>  
          <% end %>
          <br />
        <% end %>
          <br /><br />
      <% else %>
          No exhibitions for that user.
      <% end %>
    </div>
    <div id="fragment-3">
      	<div style="float:right;">
     	 		<%if current_user.login=="admin" || current_user.login=="superadmin"%>
      				<%= link_to "add an competition", new_admin_workspace_competition_path(profile_workspace.id) %>
      		<%end%>
      	</div><br />
      		<% if !(competitions_users=@current_object.user.competitions_users.all(:include => [:competition, :competitions_subscription])).empty? %>
        				<% competitions_users.each do |cu| %>
           					<%if  cu.state.blank?%>
                        	<% blank_list_element(:date => cu.created_at, :title => link_to(cu.competition.title, admin_competition_path(cu.competition_id))) do %>
                     			   <%#= link_to_remote('Pay online', :url => new_admin_payment_url(:iid => @current_object.id), :update => 'modal_space', :method => :get) if i.state != 'validated' %>
                        			<a href='/admin/competitions/create_subscribe_competition/?competion_id=<%=cu.competition_id%>'> Confirm Competition</a>
                  			<% end %>
           					<%elsif   cu.state == "accepted"%>
                      		<% blank_list_element(:date => cu.created_at, :title => link_to(cu.competition.title, admin_competition_path(cu.competition_id))) do %>
                        	<%#= link_to_remote('Pay online', :url => new_admin_payment_url(:iid => @current_object.id), :update => 'modal_space', :method => :get) if i.state != 'validated' %>
                         	<a href='/admin/competitions/create_subscribe_competition/?competion_id=<%=cu.competition_id%>'> Confirm Competition</a>
                  			<% end %>
            				<%else%>     
                  			<% blank_list_element(:date => cu.created_at, :title => link_to(cu.competition.title, admin_competition_path(cu.competition_id))+" with state '#{cu.state}'") do %>
                        		<%#= link_to_remote('Pay online', :url => new_admin_payment_url(:iid => @current_object.id), :update => 'modal_space', :method => :get) if i.state != 'validated' %>
                  			<% end %>
          					<%end%>       
                                
        				<% end %>
          				<br /><br />
      	  <% else %>
          			No subscriptions to competitions for that user.
      		<% end %>
    </div>
  	<div id="fragment-4">
   	 <div style="float:right;">
    			<%if current_user.login=="admin" || current_user.login=="superadmin"%>
    					<%= link_to "add an invoice for that contact", new_admin_invoice_path + "/#{@current_object.id}" %>
    			<%end%>
    	  </div><br />
    	  <% if !(invoices=@current_object.user.invoices).empty? %>
      			<% invoices.each do |i| %>
        				<% blank_list_element(:date => i.created_at, :title => link_to(i.title, admin_invoice_path(i.id))+" with state '#{i.state}'") do %>
          					<%#= link_to_remote('Pay online', :url => new_admin_payment_url(:iid => @current_object.id), :update => 'modal_space', :method => :get) if i.state != 'validated' %>
                                 					
          					<%= link_to 'Validate the payment', update_state_admin_invoice_path(@current_object.id, :state => 'validated') if (i.state != 'validated') && @current_user.has_system_role('admin') %>
        				<% end %>
      			<% end %>
    	 <% else %>
      			No invoices linked to that user.
    	 <% end %>
    </div>
  <div id="fragment-5">
    <div style="float:right;">
    	<%#= link_to_remote 'Inbox', :url => list_all_messages_admin_emails_path(:profile_id => @current_object.id), :update => 'emails_list', :method => :get %>
    	<%= link_to 'Inbox',        inbox_admin_emails_path(:profile_id => @current_object.id) %>
    	<%= link_to 'Compose Mail', compose_mail_admin_emails_path %>
    	<%= link_to  'Sent',        sent_mail_admin_emails_path(:profile_id => @current_object.id) %>
    </div><br />
    <div id="emails_list">
    </div>
  </div><%#fragment 5%>

	

	<div id="fragment-6">
       
		<font size=2pt>    <%=h @current_object.user.profile.biography %></font>
	</div>

	<div id="fragment-7">
          
	<%if !@current_object.notices.blank? %>	<br/>	
              <a id="displayText" href="javascript:ntoggle();">
                  <b>Update Notice</b></a>
        
                        
                        <br />				
			<font size=2pt>    <%=h @current_object.notices %></font>
			<%else%>
				No Notices for <%=h @current_object.first_name %>.<br/>
<a id="displayText" href="javascript:ntoggle();"><b>Change Notice</b></a><br />				
			<%end%>
			<div id="notice_add">
			
			</div>	
                        

<div id="noticeToggle" style="display: none">

		<font size=1pt>    <%#=h @current_object.biography %></font>
			<% form_tag(update_notices_admin_profile_path, :method => "put") do %>
				 <%= label_tag(:q, "Notice:") %> 
					<%= text_area_tag(:notice,@current_object.notices,:cols=>40) %> <br/>
			<%= submit_tag("Submit",:style=>"width:150px;margin-left:140px;") %> 
			<% end %>

</div>		
			
	</div>


  
</div>

</div>

<%#*<script>%>
  <%#*$(document).ready(function() {%>
    <%#*$("#emails").;%>
  <%#*});%>
<%#*</script>%>


<DIV ID="slideshow">

<FORM ID="ss_form" NAME="ss_form" ACTION="" METHOD="GET">

<DIV ID="ss_controls">

<A ID="ss_start" HREF="javascript:ss.next();ss.play()"><SPAN>start</SPAN></A>

<A ID="ss_stop" HREF="javascript:ss.pause()"><SPAN>stop</SPAN></A>

<A ID="ss_view" HREF="javascript:ss.hotlink()"><SPAN>view</SPAN></A>

<A ID="ss_prev" HREF="javascript:ss.previous()"><SPAN>&lt;prev</SPAN></A>

<A ID="ss_random" HREF="javascript:ss.goto_random_slide()"><SPAN>random</SPAN></A>

<A ID="ss_next" HREF="javascript:ss.next()"><SPAN>next&gt;</SPAN></A>

<!--
The following select list will be modified with the slide titles.
-->
<SELECT ID="ss_select" NAME="ss_select" ONCHANGE="ss.goto_slide(this.selectedIndex)">
  <OPTION>Welcome to the slideshow!
  <OPTION>
  <OPTION>
  <OPTION>
  <OPTION>
</SELECT>

</DIV>

<DIV ID="ss_img_div">

<A ID="ss_img_link" HREF="javascript:ss.hotlink()"><IMG
ID="ss_img" NAME="ss_img" SRC="pics/pic01.jpg"
STYLE="width:300px;"
ALT="Slideshow image"></A>

</DIV>

<DIV ID="ss_text">

<SCRIPT type="text/javascript">
<!--

// The contents of this DIV will be overwritten by browsers
// that support innerHTML.
//
// For browsers that do not support innerHTML, we will display
// a TEXTAREA element to hold the slide text.
// Note however that if the slide text contains HTML, then the
// HTML codes will be visible in the textarea.

document.write('<TEXTAREA ID="ss_textarea" NAME="ss_textarea" ROWS="6" COLS="40" WRAP="virtual"><\/TEXTAREA>\n');

ss.textarea = document.ss_form.ss_textarea;

//-->
</SCRIPT>

</DIV>

</FORM>

</DIV>

<SCRIPT TYPE="text/javascript">
<!--

// Finish defining and activating the slideshow

// Set up the select list with the slide titles
function config_ss_select() {
  var selectlist = document.ss_form.ss_select;
  selectlist.options.length = 0;
  for (var i = 0; i < ss.slides.length; i++) {
    selectlist.options[i] = new Option();
    selectlist.options[i].text = (i + 1) + '. ' + ss.slides[i].title;
  }
  selectlist.selectedIndex = ss.current;
}

// If you want some code to be called before or
// after the slide is updated, define the functions here

ss.pre_update_hook = function() {
  return;
}

ss.post_update_hook = function() {
  // For the select list with the slide titles,
  // set the selected item to the current slide
  document.ss_form.ss_select.selectedIndex = this.current;
  return;
}

if (document.images) {

  // Tell the slideshow which image object to use
  ss.image = document.images.ss_img;

  // Tell the slideshow the ID of the element
  // that will contain the text for the slide
  ss.textid = "ss_text";

  // Randomize the slideshow?
  // ss.shuffle();

  // Set up the select list with the slide titles
  config_ss_select();

  // Update the image and the text for the slideshow
  ss.update();

  // Auto-play the slideshow
  //ss.play();
}

//-->
</SCRIPT>
